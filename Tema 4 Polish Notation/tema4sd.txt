Essentially, the algorithm traverses the tokens in prefixed Polish notation from right to left and builds
the expression tree recursively, using a stack to hold temporary nodes. When it encounters an operator, 
two subtrees are pulled from the top of the stack, bound to the new node, and pushed back onto the stack.

Then, also recursively, the expression is evaluated starting from the root of the tree. 
If we find a node that is an operator, it means that we have to call the function for that node again.

I assumed that the example given in the topic (which contained parentheses) is for an easier understanding of the problem. 
Of course, the algorithm made by me does not address the case where there are parentheses in the mathematical expression.


